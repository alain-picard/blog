[{"authors":["admin"],"categories":null,"content":"I never though I\u0026rsquo;d be writing a blog\u0026hellip;\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://alain-picard.github.io/blog/author/alain-picard/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/author/alain-picard/","section":"authors","summary":"I never though I\u0026rsquo;d be writing a blog\u0026hellip;","tags":null,"title":"Alain Picard","type":"authors"},{"authors":null,"categories":null,"content":"The Setup I had the opportunity recently to teach the clojure programming language to a group of interns. I was consulting for a client who wanted to build a team of clojure developers to maintain and extend an application he had commissioned earlier from a small consultancy. I agreed to train and lead a team until we felt they were \u0026ldquo;safe without the training wheels\u0026rdquo;.\nThis was during the start of the COVID pandemic, so the entire course was held remotely, via Zoom meetings, during six weeks, with two classes of two hours each per week. Thus 12 lessons, totalling 24 hours of classes. I expected the students to spend about two hours for each hour of course work, so they ended up having to work at least 12 hours per week. (I was told later that they had, in fact, had to work quite a bit more than what I had anticipated).\nThe students (there were four of them) were highly motivated; this training was part of a recruitment effort, and two of them would most likely be hired at the end of the training; so the classes doubled as an extended evaluation period. I felt comfortable with this as this was all explained up front to the students, who got a chance to get \u0026ldquo;free training from an expert\u0026rdquo;, during a period where they could not be employed anyhow.\nWhat they learned I rushed madly trying to prepare training materials, which were heavily based on the excellent online book Clojure for the Brave and True and the clojure Koans. I had already had a chance to review the application they would be maintaining, and so knew that they would also to know clojurescript and the most excellent re-frame front end framework. This meant a lot of material to cover, and I knew that just simple, abstract exercises would not provide sufficient complexity to get a flavour for \u0026ldquo;real\u0026rdquo; clojure programming, so I resolved quite early on that the final outcome of the classes would be the delivery of a small, but complete, web based application which would be a clone of the New York Times Spelling Bee word game.\nWhat I learned Teaching is hard work. I guess I knew this; having run away from a potential teaching career early on1 but I ended up mentoring quite a number of young colleagues throughout my career, and found great satisfaction in seeing them grow. I guess the distinction is the degree of motivation of the student, and the intensity of focus.\nTeaching clojure (and lisps in general) is deceptive: on the one hand, the basic syntax of the language is so simple and easy to learn that the student gets a sense of false confidence in their progress; on the other hand, the tooling is unfamiliar (and somewhat unpolished) adding a degree of unnecessary complexity.\nOnce the initial hurdle was over, and we were able to dive into code and exercises, the next sticking point was definitely trying to understand functional idioms. None of my students had been exposed to the ideas behind functional programming at University.2 This did not greatly improve my opinion of current CS and software engineering programs\u0026hellip; The students had familiarity with the following languages: Python, Java, C# and a little C++. These are all language from the same \u0026ldquo;family\u0026rdquo;, and follow largely an object oriented, mutable in place approach to software design. Getting the students to think outside of this particular box was challenging, but rewarding.\nOne aspect which surprised me, though it perhaps shouldn\u0026rsquo;t have, is that one of the most valuable teaching aspect was the detailed code review and criticism I gave back the students to all of their exercises. One student wrote, giving feedback at the end of the course:\n The biggest thing I found helpful in this course would definitely be the code review. It really helps us improve our mindset and as programmers.\n Where I was basically taking them through a process analogous to what I normally follow with junior colleagues; i.e. extensive coding review emphasising not only correctness, but style, layout, design, and, what for lack of a better word I call good taste, my students had never had such feedback on their code. Their previous experience was submitting software to some automated test runner which ran their code, and getting a passing grade as soon as the code ran as specified in the assignment. So the greatest missing piece for them was probably the realisation that having the code simply working was by no means enough; the aim was to write understandable code.\nSo, whereas universities are trying to \u0026ldquo;teach what industry wants\u0026rdquo; by using what they think are \u0026ldquo;popular\u0026rdquo; languages, they actually fail to instil some of the more important lessons about maintainability and good taste.\nIn the end, this was most clearly exemplified by another comment from one of my students, who said:\n I think I\u0026rsquo;ve learnt more about programming through this 45 day course than in my degree.\n Outcome I was pleasantly surprised that all of my students succeeded in delivering a fully working clone of the spelling bee puzzle (albeit with hard-coded data, so no automatic puzzle generation)\nThe students actually became very collegial and helpful towards one another, even though they were effectively in competition with one another. Don\u0026rsquo;t believe the garbage that the millenials are lazy entitled brats; these guys were hardworking and friendly, and a pleasure to interact with.\nThe best thing to come of of this for me was that one of the students who was \u0026ldquo;cut\u0026rdquo; from the group eventually managed to convince my client to hire him anyway, so we ended up with a team of three instead of two, and he ended up being an excellent hire, so I think we really lucked out.\nI am, as of this writing, still engaged with this client and continue to teach them, now as temporary acting CTO and tech lead, and will have truly succeeded when I have managed to make myself redundant, and they can fully take over the maintenance and future development of the application!\n  I did teach an Astronomy for Poets (i.e. introductory astronomy for non-scientists) at UCLA right after completing my doctorate. This episode convinced me that teaching was not my vocation. \u0026#x21a9;\u0026#xfe0e;\n And they were all graduates, or soon to be graduates, of some of the best universities in Australia. \u0026#x21a9;\u0026#xfe0e;\n   ","date":1598968800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598968800,"objectID":"2654258b6f578db0ab10ae61b1f195fb","permalink":"https://alain-picard.github.io/blog/post/teaching-clojure/","publishdate":"2020-09-02T00:00:00+10:00","relpermalink":"/blog/post/teaching-clojure/","section":"post","summary":"The Setup I had the opportunity recently to teach the clojure programming language to a group of interns. I was consulting for a client who wanted to build a team of clojure developers to maintain and extend an application he had commissioned earlier from a small consultancy.","tags":["clojure","peopleware"],"title":"Teaching clojure","type":"post"},{"authors":null,"categories":null,"content":"In the beginning\u0026hellip; I\u0026rsquo;ve been using GNU Emacs pretty much daily since 1991, when I got kicked off deimos, a VAX-780 in the astronomy department at Caltech. Well, I didn\u0026rsquo;t just get kicked off of it\u0026hellip; it stopped existing, as vaxen fell out of fashion for being cost ineffective, and the department made the transition to a Convex, a now defunct super minicomputer. But that\u0026rsquo;s a story for another day.\nFinding myself with a brand new Sun Sparcstation, I then had to find another editor (at the time, I was a wiz on VMS\u0026rsquo;s EDT editor) to write my thesis, the manuscript of which was going to be written in TeX. My choices seemed to be vi and emacs, as even then I (correctly) intuited that sticking with an emulator for a defunct system was probably not a good long term strategy.\nEmacs had this nice mode called AUCTeX to facilitate authoring TeX documents. I took the plunge, and have never looked back. I of course totally fell for the tinkerer\u0026rsquo;s malady which affects most new emacs users, and spent more time exploring and configuring emacs that writing my thesis (standard work avoidance tactics).\nAs I think back about my career in programming, it seems odd that such an\u0026hellip; accidental choice ended up having such a deep impact on me. Later, I would come to appreciate emacs as a \u0026ldquo;programmable editor\u0026rdquo;, learn lisp, and eventually even build a company\u0026rsquo;s technological core on Common Lisp; I\u0026rsquo;m quite sure that would never have happened had I not had my eyes opened to the existence of such deeply interactive and evolveable systems.\nHappy, productive years go by The next two decades saw me living in emacs. From version 18.57, emacs rapidly developed into an actual GUI application (whoa! modern!) with the 19.X release. Then we were off the the races. Working in C++, then lisp, reading/writing mail and usenet (using VM and, later, GNUS), various folding modes (until the category killer, org-mode appeared in 2003), version control (first with SVN, then mercurial, and, finally the most wondrous magit, which rescues the horrible git from the pathetic mess that is its UI); emacs gave me loyal service during countless hours.\nCryptography, programming, editing remote files, diffing, rectangle modes\u0026hellip; my motto became \u0026ldquo;The Answer is Emacs. Now, what was the question?\u0026rdquo; Even better, as computers got faster, emacs\u0026rsquo; reputation for being slow and resource hungry began to fade, and now this appears quaint, as single purpose applications like slack, a glorified IRC system, dwarf emacs in terms of resource usage.\nStartup time? Not a problem if you never leave it; this session is shorter than most\u0026hellip; I remember getting to over a year of uptime once.\n(emacs-uptime) \u0026quot;23 days, 7 hours, 41 minutes, 24 seconds\u0026quot;  I\u0026rsquo;m guessing I had to reboot my computer for some reason\u0026hellip;\nTeaching emacs I guess I sort of ended being the emacs guru and evangelist wherever I went, so I ended up teaching emacs to quite a few people. I discovered an interesting phenomenon: many people took to emacs quite enthusiastically, but usually for different reasons! It seems emacs has many faces, and people need to discover their own \u0026ldquo;killer app\u0026rdquo; to see the light.\nOf course, today, many, many more special purpose tools and IDEs exist which provide much of this functionality straight out of the box (often better), it is difficult to justify the emacs way. Add to this that the emacs terminology is antiquated (a \u0026ldquo;window\u0026rdquo; in emacs doesn\u0026rsquo;t mean what you think, you want a \u0026ldquo;frame\u0026rdquo;, you don\u0026rsquo;t \u0026ldquo;cut and paste\u0026rdquo; in emacs, you \u0026ldquo;kill and yank\u0026rdquo;) it must feel like an alien and stubbornly archaic land to a new user. So why should they persevere?\nBy their tools shall ye know them Expert tools are not designed like tools for beginners. I watch my younger colleagues, and many seem to be stuck in a form of arrested development, paralyzed in a sort of \u0026ldquo;eternal beginner\u0026rdquo; state. I think it has to do with the idea of \u0026ldquo;user friendliness\u0026rdquo;, which got (mis-)interpreted as \u0026ldquo;beginner friendliness\u0026rdquo;. But a professional programmer isn\u0026rsquo;t (or, at least, shouldn\u0026rsquo;t stay) a beginner! I watch them move the mouse, click, drag, cut, scroll (again, with the mouse), click and finally paste\u0026hellip; and mentally calculate how long that took, how many times a day they do it, how many days in their life they will do it for\u0026hellip; and despair. Not to mention to mental interruption to the flow imposed by each of these tiny delays, each of these additional bits of friction.\nSo let me be clear: I believe the young programmer should strive to make their tool disappear from their consciousness; the mechanical aspects of your work should be as a musician playing his instrument: he thinks not of the instrument but about the music. The instrument \u0026ldquo;plays itself\u0026rdquo;.\nThis is the realm in which emacs excels. The reason for this is that it\u0026rsquo;s more a meta tool than a tool. The opening line of the emacs manual is essentially unchanged to this day from my hardcopy version, sixth edition, 1987:\n Emacs is the extensible, customizable, self-documenting real-time display editor.\n This emphasis on extensibility and customizability is the essence of emacs. Emacs works the way you do, not the way around. That is why, unlike these other \u0026ldquo;friendly\u0026rdquo; tools, it never runs out of features, nor slows you down, nor draws attention to itself. The price you pay for this is climbing the steep learning curve. Did you think this was going to be easy? Nothing worthwhile ever is.\nModern times These days I am deeply conflicted about whether or not to recommend to young programmers that they follow this path; it\u0026rsquo;s hard for me to gauge to what extent the time I invested in learning this tool (and the rewards I got from it) are still achievable today. For me, the principal win has been that I could do just about all of my work from within emacs, thus compounding efficiencies as I switched from one mode to another. But the world has moved on, and working outside a browser now becomes more and more difficult. Even tools like the Edit with Emacs chrome browser extension only help marginally, because now developers are made to use obnoxious tools like Jira, which (on purpose, I\u0026rsquo;m sure) prevent round tripping of their markup language to and from plain text (i.e. markdown). Furthermore, even though I still read my mail from emacs, I have to pipe it through the browser to properly view more than half of messages I now get. I sure long for the days of plain ASCII email\u0026hellip;\nWhat advice would I give a young programmer choosing today? I would say you should still consider emacs if you are the type of person who believes in expert tools. Emacs is not flashy or pretty out of the box. Remember, think of emacs not as a finished product, but as a toolkit with which to create your own, custom work environment. Emacs is an investment: you\u0026rsquo;ll have to work at it. You will either find yourself falling down the rabbit hole, and enjoying the experience, or totally bewildered and hating it. Both are fine!\nBut if you think you\u0026rsquo;ll still be doing this job in 20 years, if you want to become ever more effective at it, if you want your work tool to become an extension of your mind, then perhaps emacs is for you, even now, in 2020.\nYou\u0026rsquo;ll just have to find out for yourself, won\u0026rsquo;t you?\n","date":1597068000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597068000,"objectID":"62e7431b1ab58fd52c750b6124d6c167","permalink":"https://alain-picard.github.io/blog/post/life-in-emacs/","publishdate":"2020-08-11T00:00:00+10:00","relpermalink":"/blog/post/life-in-emacs/","section":"post","summary":"In the beginning\u0026hellip; I\u0026rsquo;ve been using GNU Emacs pretty much daily since 1991, when I got kicked off deimos, a VAX-780 in the astronomy department at Caltech. Well, I didn\u0026rsquo;t just get kicked off of it\u0026hellip; it stopped existing, as vaxen fell out of fashion for being cost ineffective, and the department made the transition to a Convex, a now defunct super minicomputer.","tags":["emacs","advice","nostalgia","tech"],"title":"My life in emacs","type":"post"},{"authors":null,"categories":null,"content":"Welcome!\nIt is odd that I have been online for so long (since 1986 or so) but have never felt the need to publish content (apart from the occasional piece of open source software, here and there). There was one early attempt, in hand-crafted HTML, around 1994, that I might try to resurrect for posterity\u0026hellip; but nothing since.\nWhat changed? I guess with the passage of time, my work took me from being a \u0026ldquo;producer\u0026rdquo; to being more of a \u0026ldquo;mentor\u0026rdquo;. During my career I began to notice the same problems, (and often, the same wrong solutions) over and over, so I figured I might as well write down some of my thoughts on these matters (not that I expect any to care what I think!)\nWho am I? A defrocked astronomer1, then a programmer2 in Australia, where I still reside. A rationalist because the only way we seem to have figured out things which are actually true, without lying to ourselves, is the scientific method. A curmudgeon, certainly, having been told at the tender age of 17 by my favourite maths professor, no less, that I had already achieved the cynicism of a 75 year old. They call it pessimism; I call it being a realist. Never stopped me from being happy\u0026hellip;\nI now work as a consultant, principally (but not exclusively) for small companies using clojure.\nNotes   I obtained my Ph.D. from Caltech in 1991, in Cosmology, and worked for a few years at the European Space Observatory. \u0026#x21a9;\u0026#xfe0e;\n Although I worked at many places, the work I am most proud of was performed at Memetrics, a now defunct company acquired by Accenture in 2008. \u0026#x21a9;\u0026#xfe0e;\n   ","date":1596549600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596549600,"objectID":"b98767759e1931aadc4f9a05b543b431","permalink":"https://alain-picard.github.io/blog/post/welcome-message/","publishdate":"2020-08-05T00:00:00+10:00","relpermalink":"/blog/post/welcome-message/","section":"post","summary":"Welcome!\nIt is odd that I have been online for so long (since 1986 or so) but have never felt the need to publish content (apart from the occasional piece of open source software, here and there).","tags":null,"title":"Welcome to my corner of the internet!","type":"post"},{"authors":null,"categories":null,"content":"Another FOO boring title And then there were none.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"2fe1f8284709de3702d59c734461ad0e","permalink":"https://alain-picard.github.io/blog/foo/test/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/foo/test/","section":"foo","summary":"Another FOO boring title And then there were none.","tags":null,"title":"","type":"foo"},{"authors":null,"categories":null,"content":"Some boring title And then there were none.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"61d0738002b1de6341cacde4fb904258","permalink":"https://alain-picard.github.io/blog/project/test/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/project/test/","section":"project","summary":"Some boring title And then there were none.","tags":null,"title":"","type":"project"},{"authors":null,"categories":null,"content":"Some boring title And then there were some!\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"81412513881eae34da4d046be1d50b92","permalink":"https://alain-picard.github.io/blog/project/test2/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/project/test2/","section":"project","summary":"Some boring title And then there were some!","tags":null,"title":"","type":"project"},{"authors":null,"categories":null,"content":"Welcome! My name is Alain Picard!\nThese are the ramblings of a curmudgeonly programmer. I like emacs, lispy languages, Unix™, and intelligent discussion. I\u0026rsquo;ll be talking about all those things, and then some. Feel free to reach out via email, or by leaving a comment.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"6083a88ee3411b0d17ce02d738f69d47","permalink":"https://alain-picard.github.io/blog/about/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/about/","section":"","summary":"Welcome! My name is Alain Picard!\nThese are the ramblings of a curmudgeonly programmer. I like emacs, lispy languages, Unix™, and intelligent discussion. I\u0026rsquo;ll be talking about all those things, and then some.","tags":null,"title":"About your host","type":"page"}]